{"name":"Fireman","tagline":"A command-line tool to access Openfire's User Service plugin via REST API.","body":"# Fireman [![Build Status](https://travis-ci.org/Urethramancer/fireman.svg?branch=master)](https://travis-ci.org/Urethramancer/fireman)\r\nThis is a simple little Go tool I made to manage users on my Openfire server. It's derived from a server tool I made to reset passwords,\r\nbut will do a bit more when finished.\r\n\r\n## Supported systems\r\nAny Unix-like system which Go runs on is going to run well. The only ones recognised at the moment are FreeBSD, Linux and OS X.\r\nWindows is most likely going to work if somebody writes the setup code (initialising paths for config, mainly), and other\r\noperating systems just need a keyword to test for.\r\n\r\n\r\n## Features\r\n- List all users\r\n- List complete users (no vital details missing)\r\n- List incomplete users (currently users without e-mail set)\r\n- Set full name, e-mail or password for individual users\r\n- Add/remove individual users\r\n- Add/remove users in bulk, with password generation\r\n\r\n### TODO\r\n- E-mail the owners of new accounts when bulk creating\r\n\r\n## Building\r\nPackages required:\r\n- code.google.com/p/gcfg\r\n- code.google.com/p/getopt\r\n\r\nCurrently developed with Go 1.4, so don't bet on it staying compatible with older versions.\r\n\r\n## Configuration\r\nThe config file is a simple INI-style file with one section, containing two entries. If it's missing it will be created on first run.\r\nTo see the location it uses, run Fireman like this:\r\n```sh\r\nfireman -v\r\n```\r\n\r\nDefault config:\r\n```ini\r\n[main]\r\nserver = http://localhost:9090/plugins/userService/\r\nkey = <key>\r\n```\r\n\r\nFireman is meant to run on the same server that Openfire is installed on, but you can add other IP addresses to its whitelist if you\r\nneed to run Fireman from other locations.\r\n\r\n## Usage\r\nRunning it without arguments or with the -h flag will show all available flags.\r\n\r\nList all users:\r\n```sh\r\nfireman -l\r\n```\r\n\r\nList only \"complete\" users (users with e-mail set):\r\n```sh\r\nfireman -c\r\n```\r\n\r\nList users with missing e-mail:\r\n```sh\r\nfireman -i\r\n```\r\nE-mail isn't required by dedault when registering users with Openfire, so this lets you filter those out in case you want to do\r\nanything to them later.\r\n\r\nSet e-mail:\r\n```sh\r\nfireman -u <username> -m <e-mail>\r\n```\r\n\r\nSet password:\r\n```sh\r\nfireman -u <username> -p <password>\r\n```\r\n\r\nAll user-edit flags can also be combined to set everything at once:\r\n```sh\r\nfireman -u <username> -n <full name> -m <e-mail> -p <password>\r\n```\r\n\r\nAdd a user (all fields except username are optional):\r\n```sh\r\nfireman -a <username> -n <full name> -m <e-mail> -p <password>\r\n```\r\n\r\nDelete a user:\r\n```sh\r\nfireman -d <username>\r\n```\r\n\r\n## Bulk operations\r\nTo add many users at once from a list, first make a comma-separated file with username, full name and e-mail.\r\nExample:\r\n```\r\none,One,one@example.com\r\ntwo,Two,two@example.com\r\nthree,Three,three@example.com\r\n```\r\n\r\nThen run the program like this:\r\n```sh\r\nfireman -A <filename>\r\n```\r\n\r\nTo delete users, simple make a list of usernames, one per line. Then run:\r\n```sh\r\nfireman -D <filename>\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}